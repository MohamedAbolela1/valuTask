// Generated by Dagger (https://dagger.dev).
package com.example.samplearch.main.presentation;

import androidx.lifecycle.SavedStateHandle;
import com.example.samplearch.main.domain.IMainRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<SavedStateHandle> savedStateHandleProvider;

  private final Provider<IMainRepository> mainRepositoryProvider;

  public MainViewModel_Factory(Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<IMainRepository> mainRepositoryProvider) {
    this.savedStateHandleProvider = savedStateHandleProvider;
    this.mainRepositoryProvider = mainRepositoryProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(savedStateHandleProvider.get(), mainRepositoryProvider.get());
  }

  public static MainViewModel_Factory create(Provider<SavedStateHandle> savedStateHandleProvider,
      Provider<IMainRepository> mainRepositoryProvider) {
    return new MainViewModel_Factory(savedStateHandleProvider, mainRepositoryProvider);
  }

  public static MainViewModel newInstance(SavedStateHandle savedStateHandle,
      IMainRepository mainRepository) {
    return new MainViewModel(savedStateHandle, mainRepository);
  }
}
