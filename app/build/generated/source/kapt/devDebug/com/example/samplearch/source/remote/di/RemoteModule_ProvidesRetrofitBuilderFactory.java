// Generated by Dagger (https://dagger.dev).
package com.example.samplearch.source.remote.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvidesRetrofitBuilderFactory implements Factory<Retrofit> {
  private final Provider<String> baseUrlProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public RemoteModule_ProvidesRetrofitBuilderFactory(Provider<String> baseUrlProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.baseUrlProvider = baseUrlProvider;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return providesRetrofitBuilder(baseUrlProvider.get(), okHttpClientProvider.get());
  }

  public static RemoteModule_ProvidesRetrofitBuilderFactory create(Provider<String> baseUrlProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new RemoteModule_ProvidesRetrofitBuilderFactory(baseUrlProvider, okHttpClientProvider);
  }

  public static Retrofit providesRetrofitBuilder(String baseUrl, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(RemoteModule.INSTANCE.providesRetrofitBuilder(baseUrl, okHttpClient));
  }
}
